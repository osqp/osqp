import{i as e}from"./init-DLRA0X12.js";class t extends Map{constructor(e,t=i){if(super(),Object.defineProperties(this,{_intern:{value:new Map},_key:{value:t}}),null!=e)for(const[n,r]of e)this.set(n,r)}get(e){return super.get(r(this,e))}has(e){return super.has(r(this,e))}set(e,t){return super.set(s(this,e),t)}delete(e){return super.delete(u(this,e))}}class n extends Set{constructor(e,t=i){if(super(),Object.defineProperties(this,{_intern:{value:new Map},_key:{value:t}}),null!=e)for(const n of e)this.add(n)}has(e){return super.has(r(this,e))}add(e){return super.add(s(this,e))}delete(e){return super.delete(u(this,e))}}function r({_intern:e,_key:t},n){const r=t(n);return e.has(r)?e.get(r):n}function s({_intern:e,_key:t},n){const r=t(n);return e.has(r)?e.get(r):(e.set(r,n),n)}function u({_intern:e,_key:t},n){const r=t(n);return e.has(r)&&(n=e.get(r),e.delete(r)),n}function i(e){return null!==e&&"object"==typeof e?e.valueOf():e}const o=Symbol("implicit");function a(){var n=new t,r=[],s=[],u=o;function i(e){let t=n.get(e);if(void 0===t){if(u!==o)return u;n.set(e,t=r.push(e)-1)}return s[t%s.length]}return i.domain=function(e){if(!arguments.length)return r.slice();r=[],n=new t;for(const t of e)n.has(t)||n.set(t,r.push(t)-1);return i},i.range=function(e){return arguments.length?(s=Array.from(e),i):s.slice()},i.unknown=function(e){return arguments.length?(u=e,i):u},i.copy=function(){return a(r,s).unknown(u)},e.apply(i,arguments),i}export{n as I,o as i,a as o};
