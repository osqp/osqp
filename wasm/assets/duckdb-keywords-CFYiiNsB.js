const e=JSON.parse(`{"array_agg":{"description":"Returns a LIST containing all the values of a column.","example":"list(A)"},"array_aggr":{"description":"Executes the aggregate function name on the elements of list","example":"list_aggregate([1, 2, NULL], 'min')"},"array_aggregate":{"description":"Executes the aggregate function name on the elements of list","example":"list_aggregate([1, 2, NULL], 'min')"},"array_apply":{"description":"Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions section for more details","example":"list_transform([1, 2, 3], x -> x + 1)"},"array_cat":{"description":"Concatenates two lists.","example":"list_concat([2, 3], [4, 5, 6])"},"array_concat":{"description":"Concatenates two lists.","example":"list_concat([2, 3], [4, 5, 6])"},"array_contains":{"description":"Returns true if the list contains the element.","example":"list_contains([1, 2, NULL], 1)"},"array_cosine_distance":{"description":"Compute the cosine distance between two arrays of the same size. The array elements can not be NULL. The arrays can have any size as long as the size is the same for both arguments.","example":"array_cosine_distance([1, 2, 3], [1, 2, 3])"},"array_cosine_similarity":{"description":"Compute the cosine similarity between two arrays of the same size. The array elements can not be NULL. The arrays can have any size as long as the size is the same for both arguments.","example":"array_cosine_similarity([1, 2, 3], [1, 2, 3])"},"array_cross_product":{"description":"Compute the cross product of two arrays of size 3. The array elements can not be NULL.","example":"array_cross_product([1, 2, 3], [1, 2, 3])"},"array_distance":{"description":"Compute the distance between two arrays of the same size. The array elements can not be NULL. The arrays can have any size as long as the size is the same for both arguments.","example":"array_distance([1, 2, 3], [1, 2, 3])"},"array_distinct":{"description":"Removes all duplicates and NULLs from a list. Does not preserve the original order","example":"list_distinct([1, 1, NULL, -3, 1, 5])"},"array_dot_product":{"description":"Compute the inner product between two arrays of the same size. The array elements can not be NULL. The arrays can have any size as long as the size is the same for both arguments.","example":"array_inner_product([1, 2, 3], [1, 2, 3])"},"array_extract":{"description":"Extract the indexth (1-based) value from the array.","example":"array_extract('DuckDB', 2)"},"array_filter":{"description":"Constructs a list from those elements of the input list for which the lambda function returns true","example":"list_filter([3, 4, 5], x -> x > 4)"},"array_grade_up":{"description":"Returns the index of their sorted position.","example":"list_grade_up([3, 6, 1, 2])"},"array_has":{"description":"Returns true if the list contains the element.","example":"list_contains([1, 2, NULL], 1)"},"array_has_all":{"description":"Returns true if all elements of l2 are in l1. NULLs are ignored.","example":"list_has_all([1, 2, 3], [2, 3])"},"array_has_any":{"description":"Returns true if the lists have any element in common. NULLs are ignored.","example":"list_has_any([1, 2, 3], [2, 3, 4])"},"array_indexof":{"description":"Returns the index of the element if the list contains the element. If the element is not found, it returns NULL.","example":"list_position([1, 2, NULL], 2)"},"array_inner_product":{"description":"Compute the inner product between two arrays of the same size. The array elements can not be NULL. The arrays can have any size as long as the size is the same for both arguments.","example":"array_inner_product([1, 2, 3], [1, 2, 3])"},"array_length":{"description":"Returns the length of the \`list\`.","example":"array_length([1,2,3])"},"array_negative_dot_product":{"description":"Compute the negative inner product between two arrays of the same size. The array elements can not be NULL. The arrays can have any size as long as the size is the same for both arguments.","example":"array_negative_inner_product([1, 2, 3], [1, 2, 3])"},"array_negative_inner_product":{"description":"Compute the negative inner product between two arrays of the same size. The array elements can not be NULL. The arrays can have any size as long as the size is the same for both arguments.","example":"array_negative_inner_product([1, 2, 3], [1, 2, 3])"},"array_position":{"description":"Returns the index of the element if the list contains the element. If the element is not found, it returns NULL.","example":"list_position([1, 2, NULL], 2)"},"array_reduce":{"description":"Returns a single value that is the result of applying the lambda function to each element of the input list, starting with the first element and then repeatedly applying the lambda function to the result of the previous application and the next element of the list. When an initial value is provided, it is used as the first argument to the lambda function","example":"list_reduce([1, 2, 3], (x, y) -> x + y)"},"array_resize":{"description":"Resizes the list to contain size elements. Initializes new elements with value or NULL if value is not set.","example":"list_resize([1, 2, 3], 5, 0)"},"array_reverse_sort":{"description":"Sorts the elements of the list in reverse order","example":"list_reverse_sort([3, 6, 1, 2])"},"array_select":{"description":"Returns a list based on the elements selected by the index_list.","example":"list_select([10, 20, 30, 40], [1, 4])"},"array_slice":{"description":"list_slice with added step feature.","example":"list_slice([4, 5, 6], 2, 3)"},"array_sort":{"description":"Sorts the elements of the list","example":"list_sort([3, 6, 1, 2])"},"array_transform":{"description":"Returns a list that is the result of applying the lambda function to each element of the input list. See the Lambda Functions section for more details","example":"list_transform([1, 2, 3], x -> x + 1)"},"array_unique":{"description":"Counts the unique elements of a list","example":"list_unique([1, 1, NULL, -3, 1, 5])"},"array_value":{"description":"Create an ARRAY containing the argument values.","example":"array_value(4, 5, 6)"},"array_where":{"description":"Returns a list with the BOOLEANs in mask_list applied as a mask to the value_list.","example":"list_where([10, 20, 30, 40], [true, false, false, true])"},"array_zip":{"description":"Zips k LISTs to a new LIST whose length will be that of the longest list. Its elements are structs of k elements from each list list_1, \u2026, list_k, missing elements are replaced with NULL. If truncate is set, all lists are truncated to the smallest list length.","example":"list_zip([1, 2], [3, 4], [5, 6])"},"cast_to_type":{"description":"Casts the first argument to the type of the second argument","example":"cast_to_type('42', NULL::INTEGER)"},"concat":{"description":"Concatenates many strings together.","example":"concat('Hello', ' ', 'World')"},"concat_ws":{"description":"Concatenates strings together separated by the specified separator.","example":"concat_ws(', ', 'Banana', 'Apple', 'Melon')"},"contains":{"description":"Returns true if the \`list\` contains the \`element\`.","example":"contains([1, 2, NULL], 1)"},"count":{"description":"Returns the number of non-null values in arg.","example":"count(A)"},"count_if":{"description":"Counts the total number of TRUE values for a boolean column","example":"count_if(A)"},"countif":{"description":"Counts the total number of TRUE values for a boolean column","example":"count_if(A)"},"date_diff":{"description":"The number of partition boundaries between the timestamps","example":"date_diff('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')"},"date_part":{"description":"Get subfield (equivalent to extract)","example":"date_part('minute', TIMESTAMP '1992-09-20 20:38:40')"},"date_sub":{"description":"The number of complete partitions between the timestamps","example":"date_sub('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')"},"date_trunc":{"description":"Truncate to specified precision","example":"date_trunc('hour', TIMESTAMPTZ '1992-09-20 20:38:40')"},"datediff":{"description":"The number of partition boundaries between the timestamps","example":"date_diff('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')"},"datepart":{"description":"Get subfield (equivalent to extract)","example":"date_part('minute', TIMESTAMP '1992-09-20 20:38:40')"},"datesub":{"description":"The number of complete partitions between the timestamps","example":"date_sub('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')"},"datetrunc":{"description":"Truncate to specified precision","example":"date_trunc('hour', TIMESTAMPTZ '1992-09-20 20:38:40')"},"day":{"description":"Extract the day component from a date or timestamp","example":"day(timestamp '2021-08-03 11:59:44.123456')"},"dayname":{"description":"The (English) name of the weekday","example":"dayname(TIMESTAMP '1992-03-22')"},"dayofmonth":{"description":"Extract the dayofmonth component from a date or timestamp","example":"dayofmonth(timestamp '2021-08-03 11:59:44.123456')"},"dayofweek":{"description":"Extract the dayofweek component from a date or timestamp","example":"dayofweek(timestamp '2021-08-03 11:59:44.123456')"},"dayofyear":{"description":"Extract the dayofyear component from a date or timestamp","example":"dayofyear(timestamp '2021-08-03 11:59:44.123456')"},"generate_series":{"description":"Create a list of values between start and stop - the stop parameter is inclusive","example":"generate_series(2, 5, 3)"},"histogram":{"description":"Returns a LIST of STRUCTs with the fields bucket and count.","example":"histogram(A)"},"histogram_exact":{"description":"Returns a LIST of STRUCTs with the fields bucket and count matching the buckets exactly.","example":"histogram_exact(A, [0, 1, 2])"},"string_agg":{"description":"Concatenates the column string values with an optional separator.","example":"string_agg(A, '-')"},"string_split":{"description":"Splits the \`string\` along the \`separator\`","example":"string_split('hello-world', '-')"},"string_split_regex":{"description":"Splits the \`string\` along the \`regex\`","example":"string_split_regex('hello world; 42', ';? ')"},"string_to_array":{"description":"Splits the \`string\` along the \`separator\`","example":"string_split('hello-world', '-')"},"struct_concat":{"description":"Merge the multiple STRUCTs into a single STRUCT.","example":"struct_concat(struct_pack(i := 4), struct_pack(s := 'string'))"},"struct_extract":{"description":"Extract the named entry from the STRUCT.","example":"struct_extract({'i': 3, 'v2': 3, 'v3': 0}, 'i')"},"struct_extract_at":{"description":"Extract the entry from the STRUCT by position (starts at 1!).","example":"struct_extract_at({'i': 3, 'v2': 3, 'v3': 0}, 2)"},"struct_insert":{"description":"Adds field(s)/value(s) to an existing STRUCT with the argument values. The entry name(s) will be the bound variable name(s)","example":"struct_insert({'a': 1}, b := 2)"},"struct_pack":{"description":"Create a STRUCT containing the argument values. The entry name will be the bound variable name.","example":"struct_pack(i := 4, s := 'string')"},"substring":{"description":"Extract substring of \`length\` characters starting from character \`start\`. Note that a start value of 1 refers to the first character of the \`string\`.","example":"substring('Hello', 2, 2)"},"substring_grapheme":{"description":"Extract substring of \`length\` grapheme clusters starting from character \`start\`. Note that a start value of 1 refers to the first character of the \`string\`.","example":"substring_grapheme('\u{1F986}\u{1F926}\u{1F3FC}\u200D\u2642\uFE0F\u{1F926}\u{1F3FD}\u200D\u2640\uFE0F\u{1F986}', 3, 2)"},"to_base":{"description":"Converts a value to a string in the given base radix, optionally padding with leading zeros to the minimum length","example":"to_base(42, 16)"},"to_base64":{"description":"Converts a \`blob\` to a base64 encoded \`string\`.","example":"base64('A'::BLOB)"},"to_binary":{"description":"Converts the value to binary representation","example":"bin(42)"},"to_centuries":{"description":"Construct a century interval","example":"to_centuries(5)"},"to_days":{"description":"Construct a day interval","example":"to_days(5)"},"to_decades":{"description":"Construct a decade interval","example":"to_decades(5)"},"to_hex":{"description":"Converts the value to hexadecimal representation.","example":"hex(42)"},"to_hours":{"description":"Construct a hour interval","example":"to_hours(5)"},"to_microseconds":{"description":"Construct a microsecond interval","example":"to_microseconds(5)"},"to_millennia":{"description":"Construct a millennium interval","example":"to_millennia(1)"},"to_milliseconds":{"description":"Construct a millisecond interval","example":"to_milliseconds(5.5)"},"to_minutes":{"description":"Construct a minute interval","example":"to_minutes(5)"},"to_months":{"description":"Construct a month interval","example":"to_months(5)"},"to_quarters":{"description":"Construct a quarter interval","example":"to_quarters(5)"},"to_seconds":{"description":"Construct a second interval","example":"to_seconds(5.5)"},"to_timestamp":{"description":"Converts secs since epoch to a timestamp with time zone","example":"to_timestamp(1284352323.5)"},"to_weeks":{"description":"Construct a week interval","example":"to_weeks(5)"},"to_years":{"description":"Construct a year interval","example":"to_years(5)"},"trim":{"description":"Removes any spaces from either side of the string.","example":"trim('>>>>test<<', '><')"}}`),t={keywords:e};export{t as default,e as keywords};
