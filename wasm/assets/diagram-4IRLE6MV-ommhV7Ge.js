var v;import{s as X}from"./chunk-NRVI72HA-gO-7Uy2L.js";import{_ as m,E as j,F as H,I as Y,d as Z,l as D,a9 as C,b as tt,a as et,p as at,q as lt,g as st,s as rt,G as nt,aa as ot,y as it}from"./mermaid-D59lkToe.js";import{p as ct}from"./chunk-ANTBXLJU-ZgvmG8Pb.js";import{p as dt}from"./treemap-75Q7IDZK-Bh5pVSmo.js";import{s as N}from"./transform-B8bpuzxV.js";import{y as k}from"./index-D4bXoNM3.js";import{o as A}from"./ordinal-DDUp3AbE.js";import{h as pt,t as ht}from"./index-BEQfoZiP.js";import"./step-BwsUM5iJ.js";import"./_baseEach-CIMlsWNn.js";import"./_baseUniq-CGK6su7v.js";import"./min-DrLfF3uL.js";import"./_baseMap-1GEe_WcR.js";import"./clone-DFaYgbfI.js";import"./_createAggregator--z161kAx.js";import"./timer-BwIYMJWC.js";import"./init-DLRA0X12.js";var G=(v=class{constructor(){this.nodes=[],this.levels=new Map,this.outerNodes=[],this.classes=new Map,this.setAccTitle=tt,this.getAccTitle=et,this.setDiagramTitle=at,this.getDiagramTitle=lt,this.getAccDescription=st,this.setAccDescription=rt}getNodes(){return this.nodes}getConfig(){const a=nt,n=H();return j({...a.treemap,...n.treemap??{}})}addNode(a,n){this.nodes.push(a),this.levels.set(a,n),n===0&&(this.outerNodes.push(a),this.root??(this.root=a))}getRoot(){return{name:"",children:this.outerNodes}}addClass(a,n){const s=this.classes.get(a)??{id:a,styles:[],textStyles:[]},o=n.replace(/\\,/g,"\xA7\xA7\xA7").replace(/,/g,";").replace(/§§§/g,",").split(";");o&&o.forEach(r=>{ot(r)&&(s!=null&&s.textStyles?s.textStyles.push(r):s.textStyles=[r]),s!=null&&s.styles?s.styles.push(r):s.styles=[r]}),this.classes.set(a,s)}getClasses(){return this.classes}getStylesForClass(a){var n;return((n=this.classes.get(a))==null?void 0:n.styles)??[]}clear(){it(),this.nodes=[],this.levels=new Map,this.outerNodes=[],this.classes=new Map,this.root=void 0}},m(v,"TreeMapDB"),v);function q(c){if(!c.length)return[];const a=[],n=[];return c.forEach(s=>{const o={name:s.name,children:s.type==="Leaf"?void 0:[]};for(o.classSelector=s==null?void 0:s.classSelector,s!=null&&s.cssCompiledStyles&&(o.cssCompiledStyles=[s.cssCompiledStyles]),s.type==="Leaf"&&s.value!==void 0&&(o.value=s.value);n.length>0&&n[n.length-1].level>=s.level;)n.pop();if(n.length===0)a.push(o);else{const r=n[n.length-1].node;r.children?r.children.push(o):r.children=[o]}s.type!=="Leaf"&&n.push({node:o,level:s.level})}),a}m(q,"buildHierarchy");var mt=m((c,a)=>{ct(c,a);const n=[];for(const r of c.TreemapRows??[])r.$type==="ClassDefStatement"&&a.addClass(r.className??"",r.styleText??"");for(const r of c.TreemapRows??[]){const d=r.item;if(!d)continue;const f=r.indent?parseInt(r.indent):0,M=yt(d),l=d.classSelector?a.getStylesForClass(d.classSelector):[],$=l.length>0?l.join(";"):void 0,x={level:f,name:M,type:d.$type,value:d.value,classSelector:d.classSelector,cssCompiledStyles:$};n.push(x)}const s=q(n),o=m((r,d)=>{for(const f of r)a.addNode(f,d),f.children&&f.children.length>0&&o(f.children,d+1)},"addNodesRecursively");o(s,0)},"populate"),yt=m(c=>c.name?String(c.name):"","getItemName"),_={parser:{yy:void 0},parse:m(async c=>{var a;try{const n=dt,s=await n("treemap",c);D.debug("Treemap AST:",s);const o=(a=_.parser)==null?void 0:a.yy;if(!(o instanceof G))throw new Error("parser.parser?.yy was not a TreemapDB. This is due to a bug within Mermaid, please report this issue at https://github.com/mermaid-js/mermaid/issues.");mt(s,o)}catch(n){throw D.error("Error parsing treemap:",n),n}},"parse")},T=10,ft={draw:m((c,a,n,s)=>{const o=s.db,r=o.getConfig(),d=r.padding??10,f=o.getDiagramTitle(),M=o.getRoot(),{themeVariables:l}=H();if(!M)return;const $=f?30:0,x=Y(a),V=r.nodeWidth?r.nodeWidth*T:960,E=r.nodeHeight?r.nodeHeight*T:500,W=V,R=E+$;let b;x.attr("viewBox",`0 0 ${W} ${R}`),Z(x,R,W,r.useMaxWidth);try{const t=r.valueFormat||",";if(t==="$0,0")b=m(e=>"$"+k(",")(e),"valueFormat");else if(t.startsWith("$")&&t.includes(",")){const e=/\.\d+/.exec(t),p=e?e[0]:"";b=m(u=>"$"+k(","+p)(u),"valueFormat")}else if(t.startsWith("$")){const e=t.substring(1);b=m(p=>"$"+k(e||"")(p),"valueFormat")}else b=k(t)}catch(t){D.error("Error creating format function:",t),b=k(",")}const w=A().range(["transparent",l.cScale0,l.cScale1,l.cScale2,l.cScale3,l.cScale4,l.cScale5,l.cScale6,l.cScale7,l.cScale8,l.cScale9,l.cScale10,l.cScale11]),J=A().range(["transparent",l.cScalePeer0,l.cScalePeer1,l.cScalePeer2,l.cScalePeer3,l.cScalePeer4,l.cScalePeer5,l.cScalePeer6,l.cScalePeer7,l.cScalePeer8,l.cScalePeer9,l.cScalePeer10,l.cScalePeer11]),z=A().range([l.cScaleLabel0,l.cScaleLabel1,l.cScaleLabel2,l.cScaleLabel3,l.cScaleLabel4,l.cScaleLabel5,l.cScaleLabel6,l.cScaleLabel7,l.cScaleLabel8,l.cScaleLabel9,l.cScaleLabel10,l.cScaleLabel11]);f&&x.append("text").attr("x",W/2).attr("y",$/2).attr("class","treemapTitle").attr("text-anchor","middle").attr("dominant-baseline","middle").text(f);const I=x.append("g").attr("transform",`translate(0, ${$})`).attr("class","treemapContainer"),K=pt(M).sum(t=>t.value??0).sort((t,e)=>(e.value??0)-(t.value??0)),B=ht().size([V,E]).paddingTop(t=>t.children&&t.children.length>0?35:0).paddingInner(d).paddingLeft(t=>t.children&&t.children.length>0?T:0).paddingRight(t=>t.children&&t.children.length>0?T:0).paddingBottom(t=>t.children&&t.children.length>0?T:0).round(!0)(K),O=B.descendants().filter(t=>t.children&&t.children.length>0),L=I.selectAll(".treemapSection").data(O).enter().append("g").attr("class","treemapSection").attr("transform",t=>`translate(${t.x0},${t.y0})`);L.append("rect").attr("width",t=>t.x1-t.x0).attr("height",25).attr("class","treemapSectionHeader").attr("fill","none").attr("fill-opacity",.6).attr("stroke-width",.6).attr("style",t=>t.depth===0?"display: none;":""),L.append("clipPath").attr("id",(t,e)=>`clip-section-${a}-${e}`).append("rect").attr("width",t=>Math.max(0,t.x1-t.x0-12)).attr("height",25),L.append("rect").attr("width",t=>t.x1-t.x0).attr("height",t=>t.y1-t.y0).attr("class",(t,e)=>`treemapSection section${e}`).attr("fill",t=>w(t.data.name)).attr("fill-opacity",.6).attr("stroke",t=>J(t.data.name)).attr("stroke-width",2).attr("stroke-opacity",.4).attr("style",t=>{if(t.depth===0)return"display: none;";const e=C({cssCompiledStyles:t.data.cssCompiledStyles});return e.nodeStyles+";"+e.borderStyles.join(";")}),L.append("text").attr("class","treemapSectionLabel").attr("x",6).attr("y",12.5).attr("dominant-baseline","middle").text(t=>t.depth===0?"":t.data.name).attr("font-weight","bold").attr("style",t=>t.depth===0?"display: none;":"dominant-baseline: middle; font-size: 12px; fill:"+z(t.data.name)+"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;"+C({cssCompiledStyles:t.data.cssCompiledStyles}).labelStyles.replace("color:","fill:")).each(function(t){if(t.depth===0)return;const e=N(this),p=t.data.name;e.text(p);const u=t.x1-t.x0;let g;r.showValues!==!1&&t.value?g=u-10-30-10-6:g=u-6-6;const y=Math.max(15,g),S=e.node();if(S.getComputedTextLength()>y){const i="...";let h=p;for(;h.length>0;){if(h=p.substring(0,h.length-1),h.length===0){e.text(i),S.getComputedTextLength()>y&&e.text("");break}if(e.text(h+i),S.getComputedTextLength()<=y)break}}}),r.showValues!==!1&&L.append("text").attr("class","treemapSectionValue").attr("x",t=>t.x1-t.x0-10).attr("y",12.5).attr("text-anchor","end").attr("dominant-baseline","middle").text(t=>t.value?b(t.value):"").attr("font-style","italic").attr("style",t=>t.depth===0?"display: none;":"text-anchor: end; dominant-baseline: middle; font-size: 10px; fill:"+z(t.data.name)+"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;"+C({cssCompiledStyles:t.data.cssCompiledStyles}).labelStyles.replace("color:","fill:"));const Q=B.leaves(),F=I.selectAll(".treemapLeafGroup").data(Q).enter().append("g").attr("class",(t,e)=>`treemapNode treemapLeafGroup leaf${e}${t.data.classSelector?` ${t.data.classSelector}`:""}x`).attr("transform",t=>`translate(${t.x0},${t.y0})`);F.append("rect").attr("width",t=>t.x1-t.x0).attr("height",t=>t.y1-t.y0).attr("class","treemapLeaf").attr("fill",t=>t.parent?w(t.parent.data.name):w(t.data.name)).attr("style",t=>C({cssCompiledStyles:t.data.cssCompiledStyles}).nodeStyles).attr("fill-opacity",.3).attr("stroke",t=>t.parent?w(t.parent.data.name):w(t.data.name)).attr("stroke-width",3),F.append("clipPath").attr("id",(t,e)=>`clip-${a}-${e}`).append("rect").attr("width",t=>Math.max(0,t.x1-t.x0-4)).attr("height",t=>Math.max(0,t.y1-t.y0-4)),F.append("text").attr("class","treemapLabel").attr("x",t=>(t.x1-t.x0)/2).attr("y",t=>(t.y1-t.y0)/2).attr("style",t=>"text-anchor: middle; dominant-baseline: middle; font-size: 38px;fill:"+z(t.data.name)+";"+C({cssCompiledStyles:t.data.cssCompiledStyles}).labelStyles.replace("color:","fill:")).attr("clip-path",(t,e)=>`url(#clip-${a}-${e})`).text(t=>t.data.name).each(function(t){const e=N(this),p=t.x1-t.x0,u=t.y1-t.y0,g=e.node(),y=p-8,S=u-8;if(y<10||S<10)return void e.style("display","none");let i=parseInt(e.style("font-size"),10);for(;g.getComputedTextLength()>y&&i>8;)i--,e.style("font-size",`${i}px`);let h=Math.max(6,Math.min(28,Math.round(.6*i))),P=i+2+h;for(;P>S&&i>8&&(i--,h=Math.max(6,Math.min(28,Math.round(.6*i))),!(h<6&&i===8));)e.style("font-size",`${i}px`),P=i+2+h;e.style("font-size",`${i}px`),(g.getComputedTextLength()>y||i<8||S<i)&&e.style("display","none")}),r.showValues!==!1&&F.append("text").attr("class","treemapValue").attr("x",t=>(t.x1-t.x0)/2).attr("y",function(t){return(t.y1-t.y0)/2}).attr("style",t=>"text-anchor: middle; dominant-baseline: hanging; font-size: 28px;fill:"+z(t.data.name)+";"+C({cssCompiledStyles:t.data.cssCompiledStyles}).labelStyles.replace("color:","fill:")).attr("clip-path",(t,e)=>`url(#clip-${a}-${e})`).text(t=>t.value?b(t.value):"").each(function(t){const e=N(this),p=this.parentNode;if(!p)return void e.style("display","none");const u=N(p).select(".treemapLabel");if(u.empty()||u.style("display")==="none")return void e.style("display","none");const g=parseFloat(u.style("font-size")),y=Math.max(6,Math.min(28,Math.round(.6*g)));e.style("font-size",`${y}px`);const S=(t.y1-t.y0)/2+g/2+2;e.attr("y",S);const i=t.x1-t.x0,h=t.y1-t.y0-4,P=i-8;e.node().getComputedTextLength()>P||S+y>h||y<6?e.style("display","none"):e.style("display",null)});const U=r.diagramPadding??8;X(x,U,"flowchart",(r==null?void 0:r.useMaxWidth)||!1)},"draw"),getClasses:m(function(c,a){return a.db.getClasses()},"getClasses")},ut={sectionStrokeColor:"black",sectionStrokeWidth:"1",sectionFillColor:"#efefef",leafStrokeColor:"black",leafStrokeWidth:"1",leafFillColor:"#efefef",labelColor:"black",labelFontSize:"12px",valueFontSize:"10px",valueColor:"black",titleColor:"black",titleFontSize:"14px"},St=m(({treemap:c}={})=>{const a=j(ut,c);return`
  .treemapNode.section {
    stroke: ${a.sectionStrokeColor};
    stroke-width: ${a.sectionStrokeWidth};
    fill: ${a.sectionFillColor};
  }
  .treemapNode.leaf {
    stroke: ${a.leafStrokeColor};
    stroke-width: ${a.leafStrokeWidth};
    fill: ${a.leafFillColor};
  }
  .treemapLabel {
    fill: ${a.labelColor};
    font-size: ${a.labelFontSize};
  }
  .treemapValue {
    fill: ${a.valueColor};
    font-size: ${a.valueFontSize};
  }
  .treemapTitle {
    fill: ${a.titleColor};
    font-size: ${a.titleFontSize};
  }
  `},"getStyles"),gt={parser:_,get db(){return new G},renderer:ft,styles:St};export{gt as diagram};
