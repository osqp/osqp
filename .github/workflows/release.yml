name: Release

on:
  push:
    tags:
      - '*'

jobs:

  release:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        # (macOS 13 is the last release to support x86 processors)
        os: [ubuntu-latest, macos-latest, macos-13, windows-2022]
        python-version: [3.9]

        include:
          - os: ubuntu-latest
            cmake_generator: "Unix Makefiles"
          - os: macos-latest
            cmake_generator: "Unix Makefiles"
          - os: macos-13
            cmake_generator: "Unix Makefiles"
          - os: windows-2022
            cmake_generator: "MinGW Makefiles"

    defaults:
      run:
        # Required when using an activated conda environment in steps
        # See https://github.com/conda-incubator/setup-miniconda#IMPORTANT
        shell: bash -l {0}

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: false
          submodules: recursive

      - name: Set up conda environment for testing
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
          activate-environment: osqp-test
          environment-file: tests/testenv.yml
          auto-activate-base: false

      - name: Setup Envvars
        run: |
          echo "OSQP_VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
          echo "OSQP_NAME=osqp-${GITHUB_REF/refs\/tags\//}-${{ matrix.os }}" >> $GITHUB_ENV

      # -----------------
      # OS-specific setup
      # -----------------
      - name: Setup (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "LD_LIBRARY_PATH=$CONDA_PREFIX/lib" >> $GITHUB_ENV
          conda install -c conda-forge libstdcxx-ng

      - name: Setup (macOS)
        if: runner.os == 'macOS'
        # Newer versions of MacOS effectively block DYLD_LIBRARY_PATH being set (System Integrity Protection)
        # Explicitly setting RPATH using `install_name_tool -add_rpath $CONDA_PREFIX/lib ./build/out/osqp_tester`
        #   doesn't work either.
        # Here we get around it by using a standard non-root location for .dylib files as a soft link
        run: |
          echo "DYLD_LIBRARY_PATH=$CONDA_PREFIX/lib" >> $GITHUB_ENV
          ln -s $CONDA_PREFIX/lib ~/lib

      - name: Setup (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "$CONDA_PREFIX/Library/bin" >> $GITHUB_PATH
      # -----------------

      - name: Build
        run: |
          cmake -DOSQP_VERSION=$OSQP_VERSION -G "${{ matrix.cmake_generator }}" -S . -B build
          cmake --build build

      # useful for inspecting the OSQP version information
      - name: OSQP Demo
        run: |
          ./build/out/osqp_demo

      - name: Generate binary release file
        run: |
          mkdir -p $OSQP_NAME/lib $OSQP_NAME/include
          cp LICENSE $OSQP_NAME/
          cp include/public/*.h $OSQP_NAME/include/
          cp build/out/libosqp.* $OSQP_NAME/lib/
          cd $OSQP_NAME && tar -czvf ../$OSQP_NAME.tar.gz *

      - name: Release binary
        uses: softprops/action-gh-release@v2
        with:
          files: ${{env.OSQP_NAME}}.tar.gz

      - name: Generate source release file
        if: ${{ runner.os == 'Linux' }}
        run: |
          git ls-files --recurse-submodules | grep -v ^site/ | tar czf osqp-${{env.OSQP_VERSION}}-src.tar.gz --files-from -

      - name: Release source
        if: ${{ runner.os == 'Linux' }}
        uses: softprops/action-gh-release@v2
        with:
          files: osqp-${{env.OSQP_VERSION}}-src.tar.gz
