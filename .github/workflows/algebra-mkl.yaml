name: 'Algebra: MKL'

on:
  push:
    branches: [ master, develop**, ci ]
    tags:
      - '*'
  pull_request:
    branches: [ master, develop** ]

jobs:

  build_and_test:
      runs-on: ${{ matrix.os }}

      strategy:
        fail-fast: false

        matrix:
          # Specify the exact Windows image because the CMake generator in the CI breaks when the image
          # updates (since Visual Studio is also updated at the same time).
          # Stick with macos-13 because the macOS 14 runners are M1-based, and therefore MKL isn't available
          # (macOS 13 is the last release to support x86 processors)
          os: [ubuntu-latest, macos-13, windows-2022]
          python-version: [3.9]
          long: ['ON', 'OFF']

          # MKL only supports double precision in the iterative solver, so that is the only combination we support as well.
          float: ['OFF']

          include:
            - os: ubuntu-latest
              cmake_generator: "Unix Makefiles"
              test_target: "test"
              # Disable ASAN right now because MKL seems to leak, which causes the tests to fail then
              use_asan: "OFF"
            - os: macos-13
              cmake_generator: "Unix Makefiles"
              test_target: "test"
              use_asan: "OFF"
            - os: windows-2022
              cmake_generator: "Visual Studio 17 2022"
              test_target: "RUN_TESTS"
              use_asan: "OFF"

      name: ${{ matrix.os }}, ${{ matrix.long == 'ON' && 'long' || 'int' }}

      defaults:
        run:
          # Required when using an activated conda environment in steps
          # See https://github.com/conda-incubator/setup-miniconda#IMPORTANT
          shell: bash -l {0}

      env:
        OSQP_BUILD_DIR_PREFIX: ${{ github.workspace }}/build
        CTEST_OUTPUT_ON_FAILURE: 1

      steps:
        - uses: actions/checkout@v4
          with:
            lfs: false
            submodules: recursive

        - name: Set up conda environment for testing
          uses: conda-incubator/setup-miniconda@v3
          with:
            auto-update-conda: true
            python-version: ${{ matrix.python-version }}
            activate-environment: osqp-test
            environment-file: tests/testenv.yml
            auto-activate-base: false

        # -----------------
        # OS-specific setup
        # -----------------
        - name: Setup (Linux)
          if: runner.os == 'Linux'
          run: |
            echo "LD_LIBRARY_PATH=$CONDA_PREFIX/lib" >> $GITHUB_ENV
            conda install -c conda-forge libstdcxx-ng

        - name: Setup (macOS)
          if: runner.os == 'macOS'
          # Newer versions of MacOS effectively block DYLD_LIBRARY_PATH being set (System Integrity Protection)
          # Explicitly setting RPATH using `install_name_tool -add_rpath $CONDA_PREFIX/lib ./build/out/osqp_tester`
          #   doesn't work either.
          # Here we get around it by using a standard non-root location for .dylib files as a soft link
          run: |
            echo "DYLD_LIBRARY_PATH=$CONDA_PREFIX/lib" >> $GITHUB_ENV
            ln -s $CONDA_PREFIX/lib ~/lib
            brew install libomp

        - name: Setup (Windows)
          if: runner.os == 'Windows'
          run: |
            echo "$CONDA_PREFIX/Library/bin" >> $GITHUB_PATH
        # -----------------

        - name: Install MKL
          run: |
            conda install -c conda-forge llvm-openmp
            conda install -c https://software.repos.intel.com/python/conda/ mkl-devel
            conda info
            conda list

        - name: Install additional dependencies (Windows)
          if: runner.os == 'Windows'
          run: |
            # Needed to get import library for the Intel OpenMP library to be found
            conda install -c https://software.repos.intel.com/python/conda/ dpcpp_impl_win-64

        - name: Build
          run: |
            cmake -G "${{ matrix.cmake_generator }}" \
                  -S . -B $OSQP_BUILD_DIR_PREFIX \
                  -DOSQP_ALGEBRA_BACKEND='mkl' \
                  -DOSQP_USE_FLOAT=${{ matrix.float }} \
                  -DOSQP_ENABLE_PROFILING=ON \
                  -DOSQP_ENABLE_INTERRUPT=ON \
                  -DOSQP_ENABLE_PRINTING=ON \
                  -DOSQP_BUILD_UNITTESTS=ON \
                  -DOSQP_COVERAGE_CHECK=OFF \
                  -DOSQP_ASAN=${{ matrix.use_asan }} \
                  -DOSQP_USE_LONG=${{ matrix.long }}
            cmake --build $OSQP_BUILD_DIR_PREFIX

        # useful for inspecting the OSQP version information
        - name: OSQP Demo
          run: |
            $OSQP_BUILD_DIR_PREFIX/out/osqp_demo

        - name: Test
          run: |
            cmake --build $OSQP_BUILD_DIR_PREFIX --target ${{ matrix.test_target }}
